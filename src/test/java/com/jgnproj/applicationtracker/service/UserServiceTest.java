package com.jgnproj.applicationtracker.service;

import com.jgnproj.applicationtracker.model.User;
import com.jgnproj.applicationtracker.repository.UserRepository;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.security.crypto.password.PasswordEncoder;

import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class UserServiceTest {

    @Mock
    private UserRepository userRepository;

    @Mock
    private PasswordEncoder passwordEncoder;

    @InjectMocks
    private UserService userService;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testRegisterNewUserSuccess() {
        String email = "test@example.com";
        String rawPassword = "password123";
        String hashedPassword = "hashedPassword123";

        when(userRepository.findByEmail(email)).thenReturn(Optional.empty()); // User does not exist
        when(passwordEncoder.encode(rawPassword)).thenReturn(hashedPassword);
        when(userRepository.save(any(User.class))).thenAnswer(invocation -> {
            User user = invocation.getArgument(0);
            user.setId(1L); // Simulate ID being set by DB
            return user;
        });

        User newUser = userService.registerNewUser(email, rawPassword);

        assertNotNull(newUser);
        assertEquals(email, newUser.getEmail());
        assertEquals(hashedPassword, newUser.getPasswordHash());
        verify(userRepository, times(1)).findByEmail(email);
        verify(passwordEncoder, times(1)).encode(rawPassword);
        verify(userRepository, times(1)).save(any(User.class));
    }

    @Test
    void testRegisterNewUserAlreadyExists() {
        String email = "existing@example.com";
        String rawPassword = "password123";
        User existingUser = new User(1L, email, "oldHashedPassword");

        when(userRepository.findByEmail(email)).thenReturn(Optional.of(existingUser)); // User already exists

        RuntimeException thrown = assertThrows(RuntimeException.class, () -> {
            userService.registerNewUser(email, rawPassword);
        });

        assertEquals("User with this email already exists: " + email, thrown.getMessage());
        verify(userRepository, times(1)).findByEmail(email);
        verify(passwordEncoder, never()).encode(anyString()); // Hashing should not occur
        verify(userRepository, never()).save(any(User.class)); // Save should not occur
    }

    @Test
    void testFindByEmailFound() {
        String email = "findme@example.com";
        User foundUser = new User(1L, email, "hashedPassword");
        when(userRepository.findByEmail(email)).thenReturn(Optional.of(foundUser));

        Optional<User> result = userService.findByEmail(email);

        assertTrue(result.isPresent());
        assertEquals(email, result.get().getEmail());
        verify(userRepository, times(1)).findByEmail(email);
    }

    @Test
    void testFindByEmailNotFound() {
        String email = "notfound@example.com";
        when(userRepository.findByEmail(email)).thenReturn(Optional.empty());

        Optional<User> result = userService.findByEmail(email);

        assertFalse(result.isPresent());
        verify(userRepository, times(1)).findByEmail(email);
    }

    @Test
    void testCheckPasswordCorrect() {
        String rawPassword = "password123";
        String encodedPassword = "hashedPassword123"; // This would be generated by BCrypt

        when(passwordEncoder.matches(rawPassword, encodedPassword)).thenReturn(true);

        assertTrue(userService.checkPassword(rawPassword, encodedPassword));
        verify(passwordEncoder, times(1)).matches(rawPassword, encodedPassword);
    }

    @Test
    void testCheckPasswordIncorrect() {
        String rawPassword = "wrongpassword";
        String encodedPassword = "hashedPassword123";

        when(passwordEncoder.matches(rawPassword, encodedPassword)).thenReturn(false);

        assertFalse(userService.checkPassword(rawPassword, encodedPassword));
        verify(passwordEncoder, times(1)).matches(rawPassword, encodedPassword);
    }
}

